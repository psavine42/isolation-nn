{
    "critiques": {
        "680": {
            "rubric_items": {
                "5510": {
                    "autograded": true,
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 7. Test functionality of AlphaBetaPlayer.alphabeta()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your AlphaBetaAgent.alphabeta function did not call the heuristic evaluation function in all of the expected set of leaf nodes configurations in the game tree as player 1. Make sure that you are using the self.score() method to evaluate the board (not calling one of your heuristic functions directly) and verify your stopping conditions. Leaf nodes are shown as (player_1, player_2) location pairs. Optional nodes may or may not be visited depending on your termination test.\n\nExpected leaf nodes:\n{((6, 5), (5, 6)), ((5, 2), (5, 6)), ((2, 5), (5, 6)), ((3, 6), (5, 6)), ((2, 3), (5, 6))}\nOptional leaf nodes:\nset()\nLeaf nodes your agent evaluated:\n{((0, 6), (6, 8)), ((1, 7), (7, 5)), ((1, 3), (3, 7)), ((4, 2), (3, 5)), ((1, 1), (3, 5)), ((4, 6), (3, 7)), ((1, 3), (7, 5)), ((4, 8), (3, 5)), ((2, 8), (3, 5)), ((1, 3), (4, 8)), ((0, 4), (7, 7)), ((8, 4), (3, 5)), ((1, 7), (3, 7)), ((7, 3), (3, 5)), ((3, 1), (7, 7)), ((0, 2), (4, 8)), ((0, 4), (6, 8)), ((1, 5), (7, 5)), ((1, 7), (3, 5)), ((1, 5), (4, 8)), ((0, 2), (7, 5)), ((1, 5), (7, 7)), ((4, 6), (3, 5)), ((3, 7), (6, 8)), ((2, 4), (4, 8)), ((2, 4), (7, 5)), ((3, 1), (6, 8)), ((1, 5), (3, 5)), ((4, 6), (7, 5)), ((1, 5), (3, 7)), ((1, 1), (7, 7)), ((0, 2), (3, 7)), ((0, 6), (7, 7)), ((2, 4), (3, 7)), ((7, 7), (3, 5)), ((0, 2), (6, 8)), ((0, 4), (4, 8)), ((1, 7), (4, 8)), ((2, 4), (6, 8)), ((1, 5), (6, 8)), ((0, 4), (7, 5)), ((4, 0), (3, 5)), ((3, 1), (4, 8)), ((3, 1), (7, 5)), ((3, 7), (3, 5)), ((1, 3), (7, 7)), ((3, 1), (3, 5)), ((5, 7), (3, 5)), ((0, 2), (3, 5)), ((4, 6), (4, 8)), ((2, 4), (3, 5)), ((3, 7), (4, 8)), ((7, 1), (3, 5)), ((1, 7), (7, 7)), ((3, 1), (3, 7)), ((0, 4), (3, 7)), ((1, 1), (4, 8)), ((1, 7), (6, 8)), ((0, 4), (3, 5)), ((4, 6), (6, 8)), ((1, 1), (7, 5)), ((0, 6), (4, 8)), ((0, 6), (7, 5)), ((8, 6), (3, 5)), ((3, 7), (7, 5)), ((4, 6), (7, 7)), ((0, 6), (3, 5)), ((1, 3), (3, 5)), ((3, 7), (7, 7)), ((0, 2), (7, 7)), ((0, 6), (3, 7)), ((2, 4), (7, 7)), ((1, 1), (3, 7)), ((6, 0), (3, 5)), ((1, 1), (6, 8)), ((1, 3), (6, 8))}\nSkipped nodes:\n{((6, 5), (5, 6)), ((5, 2), (5, 6)), ((2, 5), (5, 6)), ((3, 6), (5, 6)), ((2, 3), (5, 6))}\nExtra nodes:\n{((4, 2), (3, 5)), ((1, 3), (7, 5)), ((1, 3), (4, 8)), ((2, 4), (4, 8)), ((2, 4), (7, 5)), ((0, 2), (3, 7)), ((0, 6), (7, 7)), ((0, 2), (6, 8)), ((0, 4), (4, 8)), ((1, 3), (7, 7)), ((3, 1), (3, 5)), ((3, 7), (4, 8)), ((3, 1), (3, 7)), ((0, 2), (7, 7)), ((0, 6), (3, 7)), ((1, 1), (3, 7)), ((1, 3), (6, 8)), ((1, 3), (3, 7)), ((1, 1), (3, 5)), ((4, 6), (3, 7)), ((1, 7), (3, 7)), ((0, 2), (4, 8)), ((0, 4), (6, 8)), ((4, 6), (3, 5)), ((0, 2), (7, 5)), ((3, 7), (6, 8)), ((1, 5), (3, 5)), ((1, 5), (3, 7)), ((4, 0), (3, 5)), ((0, 4), (7, 5)), ((5, 7), (3, 5)), ((0, 2), (3, 5)), ((4, 6), (4, 8)), ((7, 1), (3, 5)), ((1, 7), (7, 7)), ((1, 1), (4, 8)), ((0, 6), (7, 5)), ((0, 4), (3, 5)), ((4, 6), (6, 8)), ((0, 6), (3, 5)), ((3, 7), (7, 7)), ((2, 4), (7, 7)), ((1, 1), (6, 8)), ((0, 6), (6, 8)), ((8, 4), (3, 5)), ((7, 3), (3, 5)), ((3, 1), (7, 7)), ((3, 1), (7, 5)), ((3, 7), (3, 5)), ((2, 4), (3, 5)), ((0, 4), (3, 7)), ((1, 7), (6, 8)), ((1, 1), (7, 5)), ((0, 6), (4, 8)), ((8, 6), (3, 5)), ((3, 7), (7, 5)), ((4, 6), (7, 7)), ((1, 5), (7, 7)), ((1, 7), (4, 8)), ((1, 7), (7, 5)), ((4, 8), (3, 5)), ((2, 8), (3, 5)), ((0, 4), (7, 7)), ((1, 5), (7, 5)), ((1, 7), (3, 5)), ((1, 5), (4, 8)), ((3, 1), (6, 8)), ((4, 6), (7, 5)), ((1, 1), (7, 7)), ((2, 4), (3, 7)), ((7, 7), (3, 5)), ((2, 4), (6, 8)), ((1, 5), (6, 8)), ((3, 1), (4, 8)), ((1, 3), (3, 5)), ((6, 0), (3, 5))}\n\nTest Case Details:\n------------------\nHeuristic: open_move_score\nDepth limit: 1\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   |   |   |   |   |   |   | \n1  |   |   |   |   |   |   |   |   |   | \n2  |   |   |   |   |   |   |   |   |   | \n3  |   |   | - | - | - |   |   |   |   | \n4  |   |   |   | - | 1 |   |   |   |   | \n5  |   |   |   | - | - | - | 2 |   |   | \n6  |   |   | - | - | - |   |   |   |   | \n7  |   |   |   |   |   |   |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 40]\n\n\n\nFailed Test: 9. Test iterative deepening in AlphaBetaPlayer.get_move()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your agent did not call the search function self.alphabeta() the expected number of times.  Iterative deepening should call the search function with sequential values until SearchTimeout is raised. SearchTimeout was set to be raised after 24 moves, and your agent called the search function 1 times.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n1. Test output interface of MinimaxPlayer.minimax():                   .\n2. Test functionality of MinimaxPlayer.minimax():                      .\n3. Test that minimax() raises SearchTimeout when the timer expires:    .\n4. Test that MinimaxPlayer successfully plays a full game:             .\n5. Test interface of AlphaBetaPlayer.alphabeta():                      .\n6. Test the interface of AlphaBetaPlayer.get_move():                   .\n7. Test functionality of AlphaBetaPlayer.alphabeta():                  F\n8. Test that alphabeta() raises SearchTimeout when the timer expires:  .\n9. Test iterative deepening in AlphaBetaPlayer.get_move():             F\n10. Test that AlphaBetaPlayer successfully plays a full game:          .\n11. Test output interface of custom_score():                           .\n12. Test output interface of custom_score_2():                         .\n13. Test output interface of custom_score_3():                         .\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                },
                "7303": {
                    "autograded": true,
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 14. Submission includes heuristic_analysis.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.\n\n\nFailed Test: 15. Submission includes research_review.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named research_review.pdf for review.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n14. Submission includes heuristic_analysis.pdf:                        F\n15. Submission includes research_review.pdf:                           F\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                }
            }
        }
    }
}